----------------------------------------------------------------------
h1. Setup Laptop

h2. Goals

* To install multiple tools

h2. Notes

* Don't get intimidated by the commands here. Just copy paste them! These are
commands that you won't have to remember again and just have to google.

* When you see this <h3><b>Execute:</b></h3> It means you have to type it on ITerm2

h2. Download ITerm2 (Mac only)

* Download from "https://www.iterm2.com/":https://www.iterm2.com/

h2. Download Sublime Text 3 (Mac only)

* Download from "https://www.sublimetext.com/":https://www.sublimetext.com/
* Follow the instructions here "https://olivierlacan.com/posts/launch-sublime-text-3-from-the-command-line/":https://olivierlacan.com/posts/launch-sublime-text-3-from-the-command-line/

h2. Download homebrew (Mac only)

Code:
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"


h2. Download homebrew (Mac only)

Code:
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

h2. Download Anaconda

For Mac Users:

* Download from: "https://www.anaconda.com/download/#macos":https://www.anaconda.com/download/#macos

For Linux Users:

* Open ubuntu 18.04 terminal
* install compilers / necessary libraries / software 

Code:
sudo apt-get install gcc gfortran git lsb
install Anaconda

Code:
wget https://repo.anaconda.com/archive/Anaconda3-5.3.0-Linux-x86_64.sh
bash Anaconda3-5.3.0-Linux-x86_64.sh

----------------------------------------------------------------------
h1. Setup Git Locally

h3. Definitions
* Local: your own computer


h2. Goals

* To setup git and ruby so that it is ready for work.

h2. Setup Name and Email

p. If you have never used git before, you need to do some setup first.
Run the following commands so that git knows your name and email

execute:
git config --global user.name "Your Name"
git config --global user.email "your_email@whatever.com"

h2. Setup Line Ending Preferences

Also, for Unix/Mac users:

execute:
git config --global core.autocrlf input
git config --global core.safecrlf true

h2. Setup Ruby 

p. For this tutorial you need a working Ruby interpreter. If you havenÂ´t one 
installed yet, it is time to set it up now:

"https://www.ruby-lang.org/en/installation/":https://www.ruby-lang.org/en/installation/

----------------------------------------------------------------------
h1. Signup for Github, Fork Repo, and Polyglot workflow

p. Now that we set up git locally, we want to sign up for a github account online.
Github allows you to "push" your code up online. To do that, your local project should be
a git repo. We'll learn more about this in class, but for now, we'll be forking a repo,
then cloning it locally.

h2. Goals

* Create a github account, request access to Polyglot's repo, and retrieve your own fork
* Understand what remote refers to
* Remember what commands you have to run when you make a change and want everybody to see
* Remember what commands you have to run when you want to get the latest lectures and handouts

h3. Definitions
* Repository/Repo: a folder containing your project's files and folders

h2. Go to github.com

* Make an account at "https://github.com/":https://github.com/

h2. Fork the Repository

p. When we "fork" a repo, we make a copy of someone else's repo and add it to our own account

* Go to "https://github.com/polyglot-coding/course/":https://github.com/polyglot-coding/course/
* Press @Fork@
<img src="fork_img.png" style="width: 750px;"></img>


p. You should have been redirected to a a new url. The repo should now be on your account, rather
than Polyglot's

<img src="own_repo.png" style="width: 750px;"></img>

h2. Clone the Repository

p. Cloning a repository to us means we take a repository from the internet and make a copy in our local computer.


* Press @Clone or download@
* Press @Use HTTPS@
* Copy the code
<img src="clone.png" style="width: 750px;"></img>


h2. Add a remote "upstream"

h3. Definitions
* Remote: Think of it as a channel. There are multiple copies of each "repo" depending on the owner. For your own, we go to channel/remote "origin". For Polyglot's own repo, we'll call it "upstream"


</br>
**Now open up iterm2 (cmd + space then type iterm2)**

Execute:
cd
mkdir Development
cd Development
mkdir polyglot
cd polyglot
git clone https://github.com/biancasubion/course.git
cd course
git remote -v
=original_remote
git remote add upstream https://github.com/polyglot-coding/course.github
=add_upstream
git remote -v
=upstream_remote

**Confirm you get something similar to below:**

Output:
=original_remote
=add_upstream
=upstream_remote
EOF

h2. Make a change

p. Now that you have a clone of your fork of Poylglot's "course" repo, make a change!

Execute:
pwd
=pwd
ls
=ls
sublime hello.py

<h3><b>Output:</b></h3>
<pre class="sample">
$ pwd
/Users/bea/Development/polyglot/course
$ ls
handouts    lectures
</pre>

File: hello_world.py
# A sublime text window should have opened up. Write anything
# you want in it! I will put this.

print("Hello World!")
EOF

p. Now save the file!

h2. Check the status of the repo and changes you made

h3. Definitions
* **Staging**: A list of changes to get committed. Imagine you're packing up stuff in a box.
Sometimes you take things out, sometimes you put it in. The box is the staging area.
* **Commit**: A list of changes with a name for the group of changes. You put the lid on the box
and labeled it "Ballet stuff"

Execute:
git status
=git_status

Output:
=git_status
EOF

h2. Add the "untracked files" to staging

Execute:
git add .
=git_add
git status
=git_status

Output:
=git_add
=git_status
EOF


h2. Commit the changes

**Commit the changes with a message! AKA "ballet stuff"** 

Execute:
git commit -m "[workflows] add a new helloworld file"
=git_commit

Output:
=git_commit
EOF


h2. Push the changes

h3. Definitions
* **Push**: Remember when you cloned the repo and added a remote "upstream"? Well now
we're going to "push" the files to that url on origin! So now your code will be online
and on github on your own repo.

h4. Let's look at our remotes

Execute:
git remote -v
=git_remote

Output:
=git_remote
EOF

**If you copy paste that URL, without the .git / .github on the end, it'll send you directly
to the either your own (origin) fork of polyglot's repo, or polyglot's (upstream) repo.**

**Make sure you push to origin always! You only pull from upstream, but you push all your
changes to origin**

Execute:
git push origin master
=git_push

Output:
=git_push
EOF


h2. Summary!

p. You'll be surprised to learn that our git "workflow" and most of the commands we'll use
will consist of the below.

Code:
git pull upstream master  #get the latest code from polyglot's master "branch"
<fill out handout / make a change>
git diff  # Optional. See all the changes you made
git status # Optional. See changes before adding it to "staging"
git add . # Add all changes to "staging" (like a draft, no saving)
git status # Optional. Confirm that the changes are staged
git commit -m "Finished handout 1"  # commit all changes (saying yes, I want to name and log this change to my computer)
git push origin master  # push changes online to github (I want to save it on the internet!)

If we take out all the optional code:

Code:
git pull upstream master # Get all changes from polyglot's offical repo
<fill out handout / make a change> # Make all changes at "local"
git add . # Add all changes to "staging"
git commit -m "Finished handout 1" # Add all changes to "commited"
git push origin master


----------------------------------------------------------------------
h1. Signup for Slack and Slack Etiquette

h2. Goals

* Create a slack account
* Add your picture, and introduce yourself
* Ask your first coding question in Slack
* Todo on January 4th, 2018

h2. Create a slack account

* Accept your email invitation to slack

h2. Introduce yourself

* Add a photo to your profile and introduce yourself

h2. Ask a coding question

* Ask any question you want but here are a couple of rules
  * You must add a title to your question
  * When you have code, surround it with backticks. This is a backtick: `
  * When you want to add to your question, click thread on your message. Do NOT keep sending new messages

h2. Post your github account to the #githubaccounts channel

* go to the #githubs account channel and message your newly created github account!
